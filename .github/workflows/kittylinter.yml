name: Kitty Linter

on:
  workflow_dispatch:  # Manual trigger

jobs:
  build:
    name: Kitty Linter
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches

      - name: Install Prettier and XML Plugin
        run: |
          npm install --save-dev prettier @prettier/plugin-xml

      - name: Format specific files with Prettier
        run: |
          npx prettier --write "**/*.{json,yml,xml}"

      - name: Check Prettier formatting
        run: |
          npx prettier --check "**/*.{json,yml,xml}"

      - name: Run Super Linter
        id: linter
        uses: super-linter/super-linter@v7.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUN_LOCAL: false
          DEFAULT_BRANCH: main
          DISABLE_LINTING: 'areaflags.map'  # Skip linting for this file
          ENABLE_LINTER: 'eslint,LibXML'
          VALIDATE_XML: 'true'
          VALIDATE_JSON: 'true'

      - name: Get changed files after formatting and linting
        id: get_changed_files
        run: |
          echo "Getting changed files after formatting and linting..."
          files=$(git diff --name-only HEAD^ HEAD)
          if [ -z "$files" ]; then
            echo "No changed files detected after formatting and linting. Exiting."
            echo "files=" >> $GITHUB_OUTPUT  # Ensure files variable is set
            exit 0
          else
            echo "Changed files: $files"
            echo "files=$(echo "$files" | tr '\n' ' ')" >> $GITHUB_OUTPUT  # Replace newlines with spaces
          fi

      - name: Commit formatted changes
        run: |
          echo "Committing formatted changes..."
          git config --local user.email "74373243+Kitty-Shackleford@users.noreply.github.com"
          git config --local user.name "Kitty-Shackleford"
          git add .
          if ! git diff-index --quiet HEAD --; then
            git commit -m "Format files with Prettier" || echo "Commit failed"
          else
            echo "No changes to commit"
          fi

      - name: Fetch latest changes
        run: |
          echo "Fetching latest changes..."
          git fetch origin
          git rebase origin/main || git merge origin/main

      - name: Create temporary directory
        run: mkdir temp_upload

      - name: Copy files for FTP upload
        run: |
          IFS=' ' read -r -a files <<< "${{ steps.get_changed_files.outputs.files }}"
          for file in "${files[@]}"; do
            if [[ "$file" == "areaflags.map" || "$file" == "db/events.xml" || "$file" == "cfgeffectarea.json" || "$file" == "cfgeventspawns.xml" ]]; then
              echo "Skipping $file for upload"
              continue
            fi
            
            if [[ "$file" == dayzOffline*/** ]]; then
              # Create directory structure in temp_upload
              dir=$(dirname "$file")
              mkdir -p "temp_upload/$dir"  # Create necessary directories
              cp "$file" "temp_upload/$file" || { echo "Failed to copy $file"; exit 1; }
              echo "Copied $file to temp_upload/$dir"  # Debugging line
            fi
          done

      - name: Check for files to upload
        run: |
          if [ -z "$(ls -A temp_upload/)" ]; then
            echo "No files to upload. Exiting."
            exit 0
          fi

      - name: Upload to FTP
        if: success()
        uses: SamKirkland/FTP-Deploy-Action@4.1.0
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: temp_upload/
          server-dir: /dayzxb_missions/
          exclude: |
            *.map
            db/events.xml
            cfgeffectarea.json
            cfgeventspawns.xml

      - name: Display Result
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo " ðŸ˜º  All done! Everything passed!"
            echo '```
            /\_/\  
           ( o.o ) 
            > ^ <  
            ```'
          else
            echo " ðŸ˜¿  Oh no! Something went wrong!"
            echo '```
            /\_/\  
           ( -.- ) 
            > ^ <  
            ```'
          fi
