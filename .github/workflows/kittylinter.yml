name: Kitty Linter

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches:
      - main  # Adjust this to your target branches if needed

jobs:
  build:
    name: Kitty Linter
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches

      - name: Install Prettier and XML Plugin
        run: |
          npm install --save-dev prettier @prettier/plugin-xml || { echo "Failed to install Prettier"; exit 1; }

      - name: Format files with Prettier
        run: |
          files=$(git diff --name-only HEAD^ HEAD)  # Get changed files since the last commit
          IFS=' ' read -r -a files <<< "$files"
          for file in "${files[@]}"; do
            if [[ "$file" == "areaflags.map" ]]; then
              echo "Skipping formatting for areaflags.map"
              continue
            fi
            if [ -f "$file" ]; then
              case "$file" in
                *.xml)
                  npx prettier --write "$file" --parser xml || { echo "Failed to format $file"; exit 1; }
                  ;;
                *.json)
                  npx prettier --write "$file" --parser json || { echo "Failed to format $file"; exit 1; }
                  ;;
                *.yaml|*.yml)
                  npx prettier --write "$file" --parser yaml || { echo "Failed to format $file"; exit 1; }
                  ;;
                *)
                  echo "Skipping $file (not an XML, JSON, or YAML file)"
                  ;;
              esac
            else
              echo "$file does not exist."
            fi
          done

      - name: Run Super Linter
        id: linter
        uses: super-linter/super-linter@v7.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUN_LOCAL: false
          DEFAULT_BRANCH: main
          DISABLE_LINTING: "areaflags.map"  # Skip linting for this file
          ENABLE_LINTER: "eslint,LibXML"
          VALIDATE_XML: "true"
          VALIDATE_JSON: "true"

      - name: Get changed files after formatting and linting
        id: get_changed_files
        run: |
          files=$(git diff --name-only HEAD^ HEAD)
          if [ -z "$files" ]; then
            echo "No changed files detected after formatting and linting. Exiting."
            echo "files=" >> $GITHUB_OUTPUT  # Ensure files variable is set
            exit 0
          else
            echo "files=$(echo "$files" | tr '\n' ' ')" >> $GITHUB_OUTPUT  # Replace newlines with spaces
          fi

      - name: Commit formatted changes
        run: |
          git config --local user.email "74373243+Kitty-Shackleford@users.noreply.github.com"
          git config --local user.name "Kitty-Shackleford"
          git add .
          if ! git diff-index --quiet HEAD --; then
            git commit -m "Format files with Prettier" || echo "Commit failed"
          else
            echo "No changes to commit"
          fi

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.WORKFLOW_TOKEN }}
          repository: Kitty-Shackleford/tsb
          force_with_lease: true

      - name: List files on FTP server
        id: list_ftp_files
        run: |
          echo "Listing files on FTP server..."
          ftp_files=$(curl -s --user "${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}" ftp://${{ secrets.FTP_SERVER }} --list)
          echo "$ftp_files" > ftp_files.txt  # Store the list for later use

      - name: Create temporary directory
        run: mkdir temp_upload

      - name: Copy files for FTP upload
        run: |
          echo "Copying relevant files to the temp_upload directory..."
          IFS=$'\n' read -d '' -r -a ftp_files < ftp_files.txt  # Read the FTP file list into an array
          for file in $(git ls-files); do
            if [[ "$file" == dayzOffline*/** ]]; then
              # Check for exclusions
              if [[ "$file" == "db/"* || "$file" == "cfgeffectarea.json" || "$file" == "cfgeventspawns.xml" ]]; then
                echo "Skipping $file for upload"
                continue
              fi

              # Get local file modification time
              local_mtime=$(git log -1 --format="%ct" -- "$file")
              echo "Checking file: $file with local modification time: $local_mtime"

              # Check if the file exists on the FTP server
              ftp_file_info=$(echo "${ftp_files[@]}" | grep "$file" || true)
              if [[ -n "$ftp_file_info" ]]; then
                # Extract FTP file's modification time
                ftp_mtime=$(echo "$ftp_file_info" | awk '{print $6, $7, $8}' | xargs -I {} date -d "{}" +%s)
                echo "FTP version found for $file with modification time: $ftp_mtime"

                # Compare modification times
                if [[ $local_mtime -le $ftp_mtime ]]; then
                  echo "File $file is not newer than FTP version. Skipping upload."
                  continue
                fi
              else
                echo "No FTP version found for $file."
              fi

              # Create directory structure in temp_upload
              dir=$(dirname "$file")
              mkdir -p "temp_upload/$dir"  # Create necessary directories
              cp "$file" "temp_upload/$file" || { echo "Failed to copy $file"; exit 1; }
              echo "Copied $file to temp_upload/$dir"
            else
              echo "Skipping $file (not in a dayzOffline directory)"
            fi
          done

      - name: Check for files to upload
        run: |
          if [ -z "$(ls -A temp_upload/)" ]; then
            echo "No files to upload. Exiting."
            exit 0
          fi

      - name: Upload to FTP
        if: success()
        uses: SamKirkland/FTP-Deploy-Action@4.1.0
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: temp_upload/
          server-dir: /dayzxb_missions/

      - name: Clean up
        run: rm -rf temp_upload/

      - name: Display Result
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo " ðŸ˜º  All done! Everything passed!"
            echo '```
            /\_/\  
           ( o.o ) 
            > ^ <  
            ```'
          else
            echo " ðŸ˜¿  Oh no! Something went wrong!"
            echo '```
            /\_/\  
           ( -.- ) 
            > ^ <  
            ```'
          fi
